{"version":3,"sources":["reducers/paras.js","reducers/index.js","actions/types.js","store.js","actions/paras.js","components/chat/Chat.jsx","assets/sampledata.js","components/questionbank/QuestionBank.jsx","components/Wrapper.jsx","App.jsx","index.js"],"names":["initialState","messages","questionBank","combineReducers","paras","state","action","type","payload","console","log","message","localStorage","setItem","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","UpdateQuestionBank","jsObject","dispatch","a","err","connect","store_props","userMessage","sendMessage","undefined","length","useState","setMessage","questionInQueue","updateQuestionInQueue","questionIndex","setQuestionIndex","endOfMessages","useRef","chat","questions","askQuestion","question","options","Object","keys","forEach","key","index","option","validateResponse","response","capitalizedOptions","push","toUpperCase","includes","getNextQuestion","question_index","nextQuestion","handleClick","e","keyCode","which","handleSendClick","useEffect","current","scrollIntoView","behavior","className","map","msg","i","style","height","src","alt","getChatRow","ref","id","onChange","target","value","onKeyPress","onClick","sampleData","QuestionBank","props","setQuestionBank","initateBot","questionBankChange","placeholder","colors","string","locale","theme","width","onChangeObj","Wrapper","App","session","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4172c08c.chunk.js","sourcesContent":["// import types\nimport {\n    INPUT_SUCCESS,\n    INPUT_FAIL,\n    SESSION_FAIL,\n    SESSION_SUCCESS,\n    MESSAGE_SUCCESS,\n    MESSAGE_FAIL,\n    QUESTION_BANK_UPDATE\n} from \"../actions/types\"\n\n// Initial State\nconst initialState = {\n    messages: [],\n    questionBank: []\n}\n\n// Switch statement - update State\nexport default (state = initialState, action) => {\n    const { type, payload } = action;\n    let { messages, questionBank } = state;\n\n    console.log(type, payload)\n    switch (type) {\n        case INPUT_SUCCESS:\n            messages = [...messages, { message: payload, type: \"user\" }]\n            return {\n                ...state,\n                messages,\n            }\n        case INPUT_FAIL:\n            return {\n                ...state,\n            }\n        case SESSION_SUCCESS:\n            localStorage.setItem(\"session\", payload[\"session_id\"])\n            return {\n                ...state,\n            }\n        case SESSION_FAIL:\n            return {\n                ...state,\n            }\n        case MESSAGE_SUCCESS:\n            messages = [...messages, { message: payload, type: \"bot\" }]\n            return {\n                ...state,\n                messages,\n            }\n        case MESSAGE_FAIL:\n            return {\n                ...state,\n            }\n        case QUESTION_BANK_UPDATE:\n            questionBank = payload\n            return {\n                ...state,\n                questionBank\n            }\n        default:\n            return {\n                ...state,\n            }\n    }\n}","// import dependencies\nimport { combineReducers } from \"redux\";\n\n// Import reducers\nimport paras from \"./paras\"\n\n// export combined reducers\nexport default combineReducers({paras})","export const INPUT_SUCCESS = \"INPUT_SUCCESS\";\nexport const INPUT_FAIL = \"INPUT_FAIL\";\n\nexport const SESSION_SUCCESS = \"SESSION_SUCCESS\";\nexport const SESSION_FAIL = \"SESSION_FAIL\" ;\nexport const MESSAGE_SUCCESS = \"MESSAGE_SUCCESS\";\nexport const MESSAGE_FAIL = \"MESSAGE_FAIL\";\nexport const QUESTION_BANK_UPDATE = \"QUESTION_BANK_UPDATE\";","// Import dependencies\nimport { createStore, applyMiddleware } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport combineReducers from \"./reducers\"\n\n// connect the application to the redux devtools\nimport {composeWithDevTools} from \"redux-devtools-extension\"\n\n// setup initial store\nconst initialState = {}\n\n// import middleware\nconst middleware = [thunk]\n\n// setup store\nconst store = createStore(combineReducers, initialState, composeWithDevTools(applyMiddleware(...middleware)))\n\n// export store\nexport default store;","// Import types\nimport { INPUT_SUCCESS, INPUT_FAIL, SESSION_FAIL, SESSION_SUCCESS, MESSAGE_SUCCESS, MESSAGE_FAIL, QUESTION_BANK_UPDATE } from \"./types\"\n\n// Fn that handles user message\nexport const UserMessage = (message) => async (dispatch) => {\n    // console.log(message)\n    try {\n        dispatch({ type: INPUT_SUCCESS, payload: message })\n    } catch (err) {\n        console.log(\"dispatch failed\", err)\n        dispatch({ type: INPUT_FAIL })\n    }\n}\n\n// Create a session - API Call\nexport const CreateSession = () => async (dispatch) => {\n    try {\n        // const res = api call to get session which will have a data dict with \"session_id\" as one key\n        let res = { data: { 'session_id': '123abcd' } }\n        dispatch({ type: SESSION_SUCCESS, payload: res.data })\n    } catch (err) {\n        dispatch({ type: SESSION_FAIL })\n    }\n}\n// Sends the message to the bot -API Call\n\nexport const SendMessage = (message) => async (dispatch) => {\n    try {\n        // I would have loved to create an intent extraction model and create backend for this assignment\n        // Sadly i dont have enough time\n        if (message === undefined || message.length === 0 || message === null){\n            message = \"Cool!, I will keep that in mind\"\n        }\n        dispatch({ type: MESSAGE_SUCCESS, payload: message })\n    } catch (err) {\n        dispatch({ type: MESSAGE_FAIL })\n    }\n}\n\n// update json question bank\nexport const UpdateQuestionBank = (jsObject) => async (dispatch) => {\n    try {\n        dispatch({ type: QUESTION_BANK_UPDATE, payload: jsObject })\n    } catch (err) {\n        console.log(err)\n    }\n}","import React, { useState, useEffect, useRef } from 'react'\nimport { connect } from \"react-redux\"\n// import actions\nimport { UserMessage, SendMessage } from \"../../actions/paras\"\n\nexport const Chat = ({ store_props, userMessage, sendMessage }) => {\n    // handle user message\n    const [message, setMessage] = useState(\"\")\n    const [questionInQueue, updateQuestionInQueue] = useState(null)\n    let [questionIndex, setQuestionIndex] = useState(null)\n\n    const endOfMessages = useRef(null)\n    let chat = store_props.messages\n    let questions = store_props.questionBank\n    const scrollToBottom = () => {\n        endOfMessages.current.scrollIntoView({ behavior: \"smooth\" })\n    }\n\n    const initiateBot = () => {\n        setQuestionIndex(0)\n        if (questions.length > 0) {\n            askQuestion(questions[0])\n            updateQuestionInQueue(questions[0])\n        }\n    }\n\n    const askQuestion = (question) => {\n        sendMessage(question.question)\n        if (question.type === \"radio\") {\n            sendMessage(\"Please chose one\")\n            const options = question.options\n            Object.keys(options).forEach((key, index) => {\n                const option = options[key]\n                sendMessage(key + \" - \" + option)\n            })\n        }\n        else if (question.type === \"text\") {\n            sendMessage(\"Please write your response\")\n        }\n        else if (question.type === \"checkbox\") {\n            sendMessage(\"Please chose one\")\n            const options = question.options\n            Object.keys(options).forEach((key, index) => {\n                const option = options[key]\n                sendMessage(key + \" - \" + option)\n            })\n            setQuestionIndex(5)\n        }\n    }\n\n    const validateResponse = (response) => {\n        // console.log(response)\n        userMessage(response)\n        if (questionInQueue.type === \"radio\") {\n            const options = questionInQueue.options\n            let capitalizedOptions = []\n            Object.keys(options).forEach((key, index) => {\n                const option = options[key]\n                capitalizedOptions.push(option.toUpperCase())\n            })\n            if (!capitalizedOptions.includes(response.toUpperCase())) {\n                sendMessage(\"Oops, I didn't get that...Silly me, Can you say that again\")\n                askQuestion(questionInQueue)\n                return\n            }\n        }\n\n        sendMessage(\"Ooooo....\")\n        sendMessage(\"That's a good choice\")\n        let next_index = questionIndex + 1\n        getNextQuestion(response, next_index)\n    }\n\n    const getNextQuestion = async (response, question_index) => {\n        console.log(response, question_index)\n        const nextQuestion = questions[question_index]\n        if (nextQuestion === undefined) {\n            sendMessage(\"It was nice talking to you :D\")\n            sendMessage(\"I am tired and gonna hit the bed, see you later...\")\n            sendMessage(\"sayonara... :P\")\n            return\n        }\n        if (nextQuestion[\"case\"] !== undefined) {\n            if (nextQuestion[\"case\"].toUpperCase() === response.toUpperCase()) {\n                console.log(nextQuestion)\n                askQuestion(nextQuestion)\n                updateQuestionInQueue(nextQuestion)\n                return null\n            }\n            getNextQuestion(response, question_index + 1)\n        }\n    }\n\n    // Function that handles user submission\n    const handleClick = async (e) => {\n        const code = e.keyCode || e.which;\n        // If pressed enter key\n        if (code === 13) {\n            handleSendClick()\n        }\n    }\n\n    const handleSendClick = async () => {\n        if (questionInQueue !== null) {\n            validateResponse(message)\n        } else {\n            userMessage(message)\n            sendMessage()\n        }\n        setMessage(\"\")\n    }\n\n    useEffect(scrollToBottom, [chat])\n    useEffect(initiateBot, [questions])\n\n    const getChatRow = (i, msg) => {\n        return (\n            <div key={i}>\n                {msg.type === \"bot\" ?\n                    <div className=\"grid grid-cols-12 grid-flow-col\">\n                        <span className=\"\"><img className=\"p-1 border-solid rounded border border-teal-400\" style={{ height: \"35px\" }} src=\"https://img.icons8.com/plasticine/100/000000/bot.png\" alt=\"bot\" /></span>\n                        <span className=\"col-span-11\"><div className={msg.type}>{msg.message}</div></span>\n                    </div>\n                    :\n                    <div className=\"grid grid-cols-12 grid-flow-col\">\n                        <span className=\"col-span-11\"><div className={msg.type}>{msg.message}</div></span>\n                        <span className=\"py-2 ml-2 text-right\"><img style={{ height: \"35px\" }} src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-4.png\" alt=\"user\" /></span>\n                    </div>\n                }\n            </div>\n        )\n    }\n\n    return (\n        <>\n            <div className=\"box border rounded chat shadow-2xl\">\n                <div className=\"mx-8\">\n                    <div className=\"mt-8 box border shadow-2xl shadow-inner rounded-lg\">\n                        <div className=\"bg-gray-200 m-2 historyContainer rounded-lg\">\n                            {chat.length === 0 ? \"\" : chat.map((msg, i) => { return getChatRow(i, msg) })}\n                            <div ref={endOfMessages}></div>\n                        </div>\n                    </div>\n                    <div className=\"flex justify-between my-2\">\n                        <div className=\"box border my-2 w-3/4\">\n                            <input className=\"w-full p-2 bg-gray-200 shadow-2xl shadow-inner\" id=\"chatbot\" onChange={(e) => setMessage(e.target.value)} onKeyPress={handleClick} value={message}></input>\n                        </div>\n                        <div onClick={handleSendClick} className=\"box border rounded-sm text-center shadow shadow-2xl cursor-pointer ml-4 my-2 w-1/4 bg-gray-400 \">\n                            <div className=\"my-2 hover:underline\">SEND</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => ({\n    store_props: state.paras,\n})\nexport default connect(mapStateToProps, { userMessage: UserMessage, sendMessage: SendMessage })(Chat);","const sampleData = [\n    {\n        \"name\": \"init\",\n        \"question\": \"Choose Case\",\n        \"type\": \"radio\",\n        \"options\": {\n            \"A\": \"A\",\n            \"B\": \"B\",\n            \"C\": \"C\"\n        }\n    },\n    {\n        \"case\": \"A\",\n        \"question\": \"Why did you choose A?\",\n        \"type\": \"text\"\n    },\n    {\n        \"case\": \"B\",\n        \"question\": \"Why did you choose B?||Why not A or C?\",\n        \"type\": \"text\"\n    },\n    {\n        \"case\": \"C\",\n        \"question\": \"Why did you choose C?\",\n        \"type\": \"checkbox\",\n        \"options\": {\n            \"a\": \"cat\",\n            \"b\": \"camel\",\n            \"c\": \"cuckoo\"\n        }\n    }\n];\n\nexport default sampleData;","import React, { useState } from 'react'\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport sampleData from \"../../assets/sampledata\"\n\nexport const QuestionBank = (props) => {\n\n    const [questionBank, setQuestionBank] = useState(sampleData)\n    \n    const jsonBoxChange = (onChangeObj) => {\n        console.log(onChangeObj.jsObject)\n        setQuestionBank(onChangeObj.jsObject)\n    }\n\n    const initateBot = async () => {\n        props.questionBankChange(questionBank)\n    }\n\n    return (\n        <>\n            <div className=\"box border rounded flex flex-col shadow shadow-2xl\">\n                {/* <div className=\"box__title bg-grey-lighter px-3 py-2 border-b\"><h3 className=\"text-sm text-grey-darker font-medium\">Source</h3></div> */}\n                <div className=\"text-left\">\n                    <JSONInput\n                        id='json_box'\n                        placeholder={sampleData}\n                        colors={{\n                            string: \"#DAA520\" // overrides theme colors with whatever color value you want\n                        }}\n                        locale={locale}\n                        height='550px'\n                        theme=\"light_mitsuketa_tribute\"\n                        width=\"100%\"\n                        onChange={jsonBoxChange}\n                    />\n                </div>\n            </div>\n            <div className=\"flex justify-center px-4 py-4\">\n                <div onClick={initateBot} className=\"box border shadow-2xl hover:underline rounded-sm text-center cursor-pointer text-sm text-white bg-secondary px-8 py-2\">\n                    INITIATE CHATTY\n                </div>\n            </div>\n        </>\n    )\n}\n","import React from 'react'\n\nimport { UpdateQuestionBank } from \"../actions/paras\"\nimport Chat from \"./chat/Chat\"\nimport { QuestionBank } from \"./questionbank/QuestionBank\"\nimport store from \"../store\"\n\nexport const Wrapper = () => {\n\n    const questionBankChange = async (jsObject) => {\n        store.dispatch(UpdateQuestionBank(jsObject))\n    }\n    return (\n        <div>\n            <div className=\"text-3xl px-12 pt-4 text-blue-700\">ChatbotX</div>\n            <div className=\"flex px-12 bg-grey-lightest font-sans\">\n                <div className=\"w-1/2\">\n                    <div className=\"py-2 text-lg\">JSON</div>\n                    <div className=\"\">\n                        <QuestionBank questionBankChange={questionBankChange} />\n                    </div>\n                </div>\n                <div className=\"w-1/2 ml-16\">\n                    <div className=\"py-2 text-lg\">Chatty</div>\n                    <Chat />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Wrapper;\n","// Import dependencies\nimport React, {useEffect} from 'react';\n\n// Import CSS\nimport \".//assets/Chat.css\"\nimport \"./assets/main.css\"\n\n// Import redux components\nimport {Provider} from \"react-redux\"\nimport store from \"./store\"\n\n// import wrapper component\nimport {Wrapper} from \"./components/Wrapper\"\n// import action \nimport {CreateSession} from \"./actions/paras\" \n\n// connect application to redux\nconst App = () => {\n  // in case the page is refreshed\n  useEffect(()=>{\n    // check if there is a session. Beyond the scope of this assignment though\n    if(!localStorage.session){\n      // create a session\n      store.dispatch(CreateSession())\n    }\n  })\n\n  return (\n    <Provider store={store}>\n      <div className=\"bg-gray-200 pb-24\">\n        {/* Insert wrapper component Here */}\n        <Wrapper/>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/main.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}